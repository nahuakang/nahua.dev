<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Nahua</title>
	<subtitle>Intersection of tech and humanities</subtitle>
	<link href="https://nahua.dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://nahua.dev"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-06-18T00:00:00+00:00</updated>
	<id>https://nahua.dev/atom.xml</id>
	<entry xml:lang="en">
		<title>[Book Review] Genghis Khan</title>
		<published>2022-06-18T00:00:00+00:00</published>
		<updated>2022-06-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://nahua.dev/book_reviews/genghis-khan-book-review/" type="text/html"/>
		<id>https://nahua.dev/book_reviews/genghis-khan-book-review/</id>
		<content type="html">&lt;p&gt;This is a book review of Jack Weatherford&#x27;s book &lt;em&gt;Genghis Khan&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;img src=&quot;&#x2F;img&#x2F;genghis_khan_book&#x2F;genghis-khan-book.jpeg&quot; alt=&quot;Genghis Khan Book Cover&quot;&#x2F;&gt;
&lt;p&gt;It could be said that Jack Weatherford was born to write a biography on Genghis Khan and his long-lasting legacies throughout human history. Having studied and lived extensively in Mongolia, he writes this biography with immersive imagination and vivid proses that a reader cannot help but feel as if they were in those historical scenes with the young, low-born Temüjin, a.k.a. Genghis Khan.&lt;&#x2F;p&gt;
&lt;p&gt;On the surface, this book can be regarded as an epic story encompassing a wide range of topics, such as history, warfares, empires, parenthood, and royal court struggles. Weatherford does not shy away from relying on &lt;em&gt;The Secret History of the Mongols&lt;&#x2F;em&gt; as a (un)reliable source for Genghis Khan&#x27;s earlier struggles as a teenager and young adult for there was very little documentation in the steppe. Despite a lack of sources, we the readers are presented an engaging story full of fratricide, kidnapping, love, blood, drama, all of which make a great, entertaining fiction.&lt;&#x2F;p&gt;
&lt;p&gt;However, such a shallow reading would miss out on the deeper point that Weatherford emphasized throughout the book: Not only did Genghis Khan surpass many renowned Western figures, such as Julius Caesar and Alexander the Great, in the raw square meter of territory conquered, but his legacies to the entire world have often been too conveniently ignored by the Western narrative of world history.&lt;&#x2F;p&gt;
&lt;p&gt;This unfortunate and perhaps deliberate ignorance of Genghis Khan&#x27;s legacy traces itself all the way back to medieval Europe, at the time a relatively poor and economically unattractive region to its potential Mongolian conquerers. The Mongols, who were already at the gate of Europe, retreated from Poland and Hungary and settled around modern-day Ukraine, known at the time as the Golden Horde. Having been prevented from warfare and instability like its neighboring Middle Eastern caliphs, Europe would end up benefiting from all the accomplishments and legacies that emerged from the flourishing trade and economic gains that came from stability established by the Mongol conquest without having been sacked like their eastern counterparts. Thereafter, the subsequent rise of European culture via the Renaissance and the Enlightenment ironically deemed Mongols and Genghis Khan as savages since most of them never interacted with the Mongols and thus had little document on this mysterious Asian people.&lt;&#x2F;p&gt;
&lt;p&gt;Weatherford argues that, in contrast to the savagery description by some Enlightenment philosophers such as Voltaire, Genghis Khan&#x27;s rule of conquered territory was focused on law and order, fairness, stability, and economic prosperity. The Mongols secured previously dangerous trade routes that linked China via the Middle East and Africa all the way to Europe.&lt;&#x2F;p&gt;
&lt;p&gt;Mongol rule was so strict and effective that a &amp;quot;global&amp;quot; economy of commerce and trade emerged in Genghis Khan&#x27;s empire. His descendants, who ruled over different regions, would grow up enjoying collecting goods and items from their relatives&#x27;s territories, which highly resembles a globalized, connected economy that we enjoy today. In Khanbaliq, which would later become Beijing, Chinese, Arabs, Jews, Persians, Mongols, Genoese, and other people would trade. It was truly a scene of &amp;quot;globalization&amp;quot; never seen before, all united under one big blue sky.&lt;&#x2F;p&gt;
&lt;p&gt;While Genghis Khan&#x27;s contemporary European rulers enjoyed torture as a technique on both the innocent and guilty, the Mongols detested torture and disfigurement as treatment of their fellow humans. In some sense, the &amp;quot;barbaric&amp;quot; Mongols were much more enlightened than their &amp;quot;civilized&amp;quot; European fellows. When reading Weatherford&#x27;s account of this history, one cannot help but wonder how twisted the interpretation of history from a Christian perspective can be if it took such great liberty in turning a civilized society into fictional inhuman savages.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps more surprising of all, different religions were tolerated by the Khan of Khans so long as the believers put the Khan, or in modern terms, the state, before their Gods, the religion. Though it may not be a clear separation of state and religion, Genghis Khan&#x27;s treatment of religion in his empire was remarkably progressive in political terms. Rebellions under the name of a specific God would be brutally crushed but in the court of the Mongol Khan, people of different cultures and religious backgrounds thrived on their merits and competence, not their race or ethnicity.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast to the stereotypical image that wherever the Mongols went, they ransacked towns and cultures, in reality the Mongols improved not only military tactics but led the spread of technology and progress wherever they went. For instance, they brought Chinese herbalists to Persia and Persian physicians to China. They revolutionaized gun powder warfare and spread it westward. Moreover, the Mongols unified regions that still share roughly the same territories today: Song dynasty merged with the north as well as Tibet and the land of Uighurs, which roughly resembles modern day China; Persian culture saw a resurgence under Mongol rule; the self-claimed descendants of the Mongols ruled India as the Moghuls; the Golden Horde influenced Russians and Ukrainians both culturally and politically. Interestingly, &amp;quot;hurrah&amp;quot;, a popular bravado commonly seen across European and Anglo-Saxon countries, was originally borrowed from the Mongols. The negative term &amp;quot;mogul&amp;quot; also carries its origin from &amp;quot;Mongol&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;While Genghis Khan constantly reminded himself that he should not forget the way of the Mongols, he failed in terms of parenthood and was not particularly a good father, whose prolonged absence from home led to disunity among his sons (though in his other book &lt;em&gt;The Secret History of the Mongol Queens&lt;&#x2F;em&gt; he illustrates the brilliance of Genghis Khan&#x27;s daughters). His sons and grandchildren, in turn, not only enjoyed in-fight over territories and titles, but also gradually forgot the way of the Mongols and became sedentary and assimilated into the cultures from the territories they ruled. It was known that the great Khublai Khan, a grandson of Genghis, was overweight, could not ride a horse for hunting, and was regarded by fellow Mongols as enjoying the Chinese way of life more than a Mongol should.&lt;&#x2F;p&gt;
&lt;p&gt;While the divided Mongol Empire continued after Genghis&#x27;s death and functioned for another century or so, what finally brought the Mongols down was a deadly disease called Black Death that ironically, like the Covid, originated in southern China. Empires, regions, provinces, cities all suffered population loss or locked themselves in to manage the spread of the disease. Global trade suffered and stopped, and the Mongol rulers had to gradually adopt the religions of their territories to appease the discontent population that was Arabic, Persian, Chinese, or Slavic.&lt;&#x2F;p&gt;
&lt;p&gt;And so, a vast empire that started with one young Temüjin who was forced by his bitter life to protect his own family, this same empire was finally brought down by an invisible virus that wiped out a large chunk of the human population. History, glory, life, and fate seem so random and ephemeral yet ever-lasting all at once.&lt;&#x2F;p&gt;
&lt;p&gt;The Soviets cracked down brutally on Mongolians who held on to the history of Genghis Khan. Not only were intellectuals and civilians murdered for studying or learning what was rightfully their nation&#x27;s history, but the black sulde of Genghis Khan, a pole with circularly arranged horse hair that symbolized the soul of the great Khan, disappeared and was to be never found again. And so, with this not-so-brief and brutal blow from the radical viral ideology of communism, the last physical piece of item that belonged to Genghis Khan was gone from our world.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, in a perhaps free and democratic corner of this earth, free from the deadly threats of a pandemic thanks to technology and privileged of the protection from Enlightenment values that had ties to the rise of the Mongols, some of us are lucky to enjoy Weatherford&#x27;s entertaining and rich book on this historical figure so crucial to a small landlocked country&#x27;s identity as well as the entire world&#x27;s history.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe we don&#x27;t need to recover Genghis Khan&#x27;s sulde. After all, his legacies are with us forever in our collective journey as the humankind.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>[Open Source] PR Walk-Through: Make a Rust SeaORM Contribution</title>
		<published>2022-05-28T00:00:00+00:00</published>
		<updated>2022-05-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://nahua.dev/blog/open-source-walk-through-with-rust-seaorm/" type="text/html"/>
		<id>https://nahua.dev/blog/open-source-walk-through-with-rust-seaorm/</id>
		<content type="html">&lt;p&gt;In this blog post, I&#x27;ll walk you through an open source PR I submitted to SeaORM with Rust.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This is a transparent and honest story that serves as a walk-through of my first open source issue after a long break from the open source world. The aim of this blog post is to demystify the process of contributing to open source projects and help the readers realize that open source contribution is (often) challenging but rewarding and fun.&lt;&#x2F;p&gt;
&lt;p&gt;While I use a contribution to Rust’s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&quot;&gt;&lt;code&gt;SeaORM&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; as an example, you do not need any knowledge in Rust to follow this post’s thought process and procedure to take away lessons that might help you start your open source journey in any language or ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;If you like this post or have questions, feel free to share the post and interact with &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nahuakang&quot;&gt;my Twitter handle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Alrighty, hop on the wagon and let us begin this story!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;Tl;dr&lt;&#x2F;h2&gt;
&lt;p&gt;I know many of you won’t have the time or patience to read my blah blah, so here’s the main take-aways for contributing to open source projects:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pick a project that not only relates to your work or hobby but is also beginner-friendly with maintainers who are willing to offer mentorship and guidance.&lt;&#x2F;li&gt;
&lt;li&gt;Pick an issue that’s beginner-friendly, well-scoped (size small to medium) to make sure you can understand the issue at hand without being overwhelmed.&lt;&#x2F;li&gt;
&lt;li&gt;Communicate with the maintainers actively about the issue and possible solutions so that they are onboard with your ideas, vice versa. This way, you save both the maintainers’s and your time when it comes to code review.&lt;&#x2F;li&gt;
&lt;li&gt;If you ran into a wall, never hesitate to ask the maintainers for help with detailed, well-formulated questions. If one doesn’t answer, ask another. Maintainers are usually helpful and friendly humans.&lt;&#x2F;li&gt;
&lt;li&gt;Don’t forget to be polite, communicative, and helpful to others in the open source community 🫶&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;motivation-to-write-about-open-source-contribution&quot;&gt;Motivation to write about open source contribution&lt;&#x2F;h2&gt;
&lt;p&gt;As software engineers, we are often advised to contribute to open source projects as a way to hone our reading and writing skills as well as to give back to the community. However, many new programmers, including myself, tend to feel very intimidated by open source codebases that might appear foreign, abstract, or overwhelming.&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, I decided to create this blog post (and maybe more future posts) to show other open source enthusiasts my process as well as my inner dialogue when working on open source contributions.&lt;&#x2F;p&gt;
&lt;p&gt;To make the post more readable and less fragmented, I presented the entire story in more or less a linear storyline. Please keep in mind that the reality is much more complex, complicated, and iterative. There is usually a lot more struggles going into a first contribution to an unfamiliar project, but it is all worth the effort.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pick-a-beginner-friendly-project&quot;&gt;Pick a beginner-friendly project&lt;&#x2F;h2&gt;
&lt;p&gt;I was trying out Rust Tokio’s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&#x2F;&quot;&gt;axum&lt;&#x2F;a&gt; web framework for building APIs when I encountered a mild issue: &lt;strong&gt;&lt;em&gt;I am not particularly good at raw SQL&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In my previous job, I worked mostly in &lt;a href=&quot;https:&#x2F;&#x2F;www.djangoproject.com&#x2F;&quot;&gt;Django&lt;&#x2F;a&gt; (with a little bit of Go), which has an amazing ORM that spoiled me. I am certainly happy and willing to hone my SQL skills, but I also wondered if there was a decent ORM framework in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;By chance, I landed on the homepage of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&quot;&gt;SeaQL&lt;&#x2F;a&gt;, the project behind the Rust crate &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&quot;&gt;SeaORM&lt;&#x2F;a&gt;, an async, dynamic, and testable ORM that supports Postgres, MySQL, and SQLite at the time this blog post was written. It seems like a project with a lot of care from its creators, so I decided to see if there’s an opportunity for doing some open source contribution.&lt;&#x2F;p&gt;
&lt;p&gt;It’s good to iterate on an important point in open source contribution: &lt;strong&gt;&lt;em&gt;Choose a project that matters to us!&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; Working on a codebase means that we must play with the code ourselves. If the project does not relate to our work or hobby, then we’d be reluctant to play with the code or to test the code we write for the project. I’m a backend engineer and I interact with databases all the time, so an ORM for Rust seems meaningful to me and I’d love to play with SeaORM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choose-a-beginner-friendly-issue&quot;&gt;Choose a beginner-friendly issue&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing I did was skimming through the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&quot;&gt;open issues&lt;&#x2F;a&gt; of SeaORM. Luckily, SeaORM’s maintainers are very active and it was easy for me to spot a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661&quot;&gt;&lt;code&gt;good first issue&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: &lt;strong&gt;Add flag to &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; to generate code for &lt;code&gt;time&lt;&#x2F;code&gt; crate #661.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Keep in mind that some projects aren’t actively labelling &lt;code&gt;good first issue&lt;&#x2F;code&gt; issues and some maintainers don’t have the time or capacity to mentor or guide new contributors.&lt;&#x2F;p&gt;
&lt;p&gt;I personally avoid those projects because I didn’t see myself as very good at navigating on foreign terrain in a codebase due to having programmed professionally for only 2 years. With more years of experience, we’d become better at this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understand-the-issue&quot;&gt;Understand the issue&lt;&#x2F;h2&gt;
&lt;p&gt;Back to the story. As the issuer suggested in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661&quot;&gt;the link&lt;&#x2F;a&gt;: Since the &lt;code&gt;time&lt;&#x2F;code&gt; crate is supported as alternative to &lt;code&gt;chrono&lt;&#x2F;code&gt;, it should be possible to generate code for &lt;code&gt;time&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;p&gt;For those who don’t know enough about Rust, there are 2 crates in Rust that deal with time and date, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;time&quot;&gt;&lt;code&gt;time&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chrono&quot;&gt;&lt;code&gt;chrono&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (&lt;em&gt;note that a &lt;code&gt;crate&lt;&#x2F;code&gt; is the equivalent of a &lt;code&gt;gem&lt;&#x2F;code&gt; in Ruby or &lt;code&gt;package&lt;&#x2F;code&gt; in Python and Javascript&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The problem at hand seems to be that &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt;, the command line tool for &lt;code&gt;SeaORM&lt;&#x2F;code&gt;, appeared to generate only code that corresponds to &lt;code&gt;chrono&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;datetime&lt;&#x2F;code&gt; types and some users would like to have a feature in the command line tool to generate &lt;code&gt;time&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;datetime&lt;&#x2F;code&gt; types without having to write custom code themselves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;define-questions-for-solving-the-issue&quot;&gt;Define questions for solving the issue&lt;&#x2F;h2&gt;
&lt;p&gt;Having had very little experience writing &lt;code&gt;CLI&lt;&#x2F;code&gt; tools in Rust (or any language for that matter), I laid down some bullet points that I needed clarification in order to work on this issue:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Where in the codebase is the &lt;code&gt;chrono&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;datetime&lt;&#x2F;code&gt; types being generated?&lt;&#x2F;li&gt;
&lt;li&gt;How do I use &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; to reproduce the reported issue so that I can progressively iterate towards a solution?&lt;&#x2F;li&gt;
&lt;li&gt;What kind of a flag would the maintainers be happy to accept for the finished feature?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;find-the-relevant-code-for-the-issue-at-hand&quot;&gt;Find the relevant code for the issue at hand&lt;&#x2F;h2&gt;
&lt;p&gt;I posted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661#issuecomment-1118845064&quot;&gt;the first question&lt;&#x2F;a&gt; to the issue’s thread:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;m looking for a &lt;code&gt;good first issue&lt;&#x2F;code&gt; :) Just wondering how one is generating code for &lt;code&gt;chrono&lt;&#x2F;code&gt; right now?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Billy, one of the maintainers, was quick to reply &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661#issuecomment-1119393055&quot;&gt;an answer&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nahuakang&quot;&gt;@nahuakang&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;, welcome! You can take a look at:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm&#x2F;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;86e7e808b37179315a1cc5c6c852764830c04661&#x2F;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs#L47-L51
&lt;&#x2F;span&gt;&lt;span&gt;ColumnType::Date =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;ColumnType::Time(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;ColumnType::DateTime(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;ColumnType::Timestamp(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeUtc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;ColumnType::TimestampWithTimeZone(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeWithTimeZone&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, at least now I have some code that I can read. I felt some adrenaline kicking into my system now that I got the first thread of code to investigate. But my dearest enemy, &lt;strong&gt;&lt;em&gt;imposter syndrome&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;, also kicked in.&lt;&#x2F;p&gt;
&lt;p&gt;I started questioning myself and wondered if I’d be able to actually come up with a solution? After all, some &lt;code&gt;good first issue&lt;&#x2F;code&gt; issues aren’t that easy. What if I can’t solve it and embarrass myself? Because of this, I &lt;strong&gt;&lt;em&gt;procrastinated&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;communicate-with-maintainers-before-coding&quot;&gt;Communicate with maintainers before coding&lt;&#x2F;h2&gt;
&lt;p&gt;As a seasoned procrastinator, I waited for a day before I posted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661#issuecomment-1120210927&quot;&gt;the next two questions&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;billy1624&quot;&gt;@billy1624&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; Thanks! I&#x27;m reading the docs as well as trying to understand the workflow with &lt;code&gt;sea-orm&lt;&#x2F;code&gt; now. Are there any examples&#x2F;tests that demonstrate how to use &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; to generate code for entities involving &lt;code&gt;chrono&lt;&#x2F;code&gt;? I haven&#x27;t seen a &lt;code&gt;chrono&lt;&#x2F;code&gt;
 flag in &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; so I wonder if the solution here is to add a flag for &lt;code&gt;time&lt;&#x2F;code&gt; crate or something else (like handling &lt;code&gt;time&lt;&#x2F;code&gt; types)?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Luckily, it was the weekend so it took Billy a few days &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;issues&#x2F;661#issuecomment-1121839813&quot;&gt;to respond&lt;&#x2F;a&gt;, by which time I had calmed down from my imposter anxiety:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nahuakang&quot;&gt;@nahuakang&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;, you can simply create a database table with timestamp &#x2F; datetime columns. Then, follow the steps on &lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;sea-orm-cli&quot;&gt;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;sea-orm-cli&lt;&#x2F;a&gt;, to generate entity files with &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt;.
We don&#x27;t have a &lt;code&gt;chrono&lt;&#x2F;code&gt; flag for &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt;, since it&#x27;s the default crate to represent datetime crate as of now. I think we can add an option, &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt;, to &lt;code&gt;sea-orm-cli generate entity&lt;&#x2F;code&gt;. It will take values such as &lt;code&gt;chrono&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;time&lt;&#x2F;code&gt; with &lt;code&gt;chrono&lt;&#x2F;code&gt; being the default. This way it&#x27;s backward compatible and users can opt-in to it.
Thoughts?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, so the flag for this option should be &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt; and we should run the new feature like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# To use the time crate for the command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-cli generate entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --date-time-crate&lt;&#x2F;span&gt;&lt;span&gt;=time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; postgres:&#x2F;&#x2F;nahua:password@localhost:5432&#x2F;timetest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;entity
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# To use the chrono crate for the command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-cli generate entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --date-time-crate&lt;&#x2F;span&gt;&lt;span&gt;=chrono&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; postgres:&#x2F;&#x2F;nahua:password@localhost:5432&#x2F;timetest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;entity
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is good. So I claimed this issue and began working towards a solution in a format that I knew the maintainers would be willing to accept.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;familiarize-ourselves-with-the-documentation&quot;&gt;Familiarize ourselves with the documentation&lt;&#x2F;h2&gt;
&lt;p&gt;Quick pause to clarify some important details before jumping into the solution section.&lt;&#x2F;p&gt;
&lt;p&gt;During this entire time as I communicated with Billy, I was actively reading &lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&quot;&gt;SeaORM’s documentation&lt;&#x2F;a&gt;. It’s a new ORM and it does things differently from what I did in the Python world.&lt;&#x2F;p&gt;
&lt;p&gt;The most important bits I learned from the documentation that helped me solve the issue were:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;entity-structure&quot;&gt;&lt;code&gt;Entity&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: The representation of a table in SeaORM. In the &lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;entity-structure#column-type&quot;&gt;column types section&lt;&#x2F;a&gt;, I found out about how the &lt;code&gt;time&lt;&#x2F;code&gt; and &lt;code&gt;chrono&lt;&#x2F;code&gt; Rust &lt;code&gt;datetime&lt;&#x2F;code&gt; types correspond to SeaORM’s types.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;sea-orm-cli&quot;&gt;&lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: I learned how to use the &lt;code&gt;CLI&lt;&#x2F;code&gt; tool that I was now supposed to fix.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;reproduce-the-issue&quot;&gt;Reproduce the issue&lt;&#x2F;h2&gt;
&lt;p&gt;To reproduce the existing issue, I needed to do a few things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A minimal Rust cargo project to generate the &lt;code&gt;entities&lt;&#x2F;code&gt; in&lt;&#x2F;li&gt;
&lt;li&gt;A running database of my choice that &lt;code&gt;SeaORM&lt;&#x2F;code&gt; can connect to (Postgres)&lt;&#x2F;li&gt;
&lt;li&gt;Generate a table full of date &amp;amp; time types&lt;&#x2F;li&gt;
&lt;li&gt;Run the command to confirm the issue&lt;&#x2F;li&gt;
&lt;li&gt;Investigate the code more to understand where I could add the feature to solve the issue&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;1-create-a-minimal-cargo-project&quot;&gt;1. Create a minimal cargo project&lt;&#x2F;h3&gt;
&lt;p&gt;This is really easy in Rust. I simply ran the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo new playground
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd playground
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; README.md
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; src
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since I know I’ll be only generating entity files (in any directory of my choice) to observe whether &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; could generate code that has the correct types for &lt;code&gt;chrono&lt;&#x2F;code&gt; or &lt;code&gt;time&lt;&#x2F;code&gt; given the user’s choice, this barebone project would suffice without any extra boilerplate code.&lt;&#x2F;p&gt;
&lt;p&gt;I installed the latest distribution of &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; with the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo install sea-orm-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-spin-up-a-postgres-db&quot;&gt;2. Spin up a Postgres DB&lt;&#x2F;h3&gt;
&lt;p&gt;I have Postgres installed on my Macbook, but I really like using Docker for spinning up a garbage DB that I can test in, so I copy-pasted a very simple &lt;code&gt;docker-compose&lt;&#x2F;code&gt; file that I use a lot for job interviews:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Dockerfile &quot;&gt;&lt;code class=&quot;language-Dockerfile&quot; data-lang=&quot;Dockerfile&quot;&gt;&lt;span&gt;version: &amp;quot;3.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;services:
&lt;&#x2F;span&gt;&lt;span&gt;  db:
&lt;&#x2F;span&gt;&lt;span&gt;    image: postgres:latest
&lt;&#x2F;span&gt;&lt;span&gt;    container_name: postgres
&lt;&#x2F;span&gt;&lt;span&gt;    restart: always
&lt;&#x2F;span&gt;&lt;span&gt;    ports:
&lt;&#x2F;span&gt;&lt;span&gt;      - 5432:5432
&lt;&#x2F;span&gt;&lt;span&gt;    environment:
&lt;&#x2F;span&gt;&lt;span&gt;      - POSTGRES_USER=nahua
&lt;&#x2F;span&gt;&lt;span&gt;      - POSTGRES_PASSWORD=password
&lt;&#x2F;span&gt;&lt;span&gt;      - POSTGRES_DB=timetest
&lt;&#x2F;span&gt;&lt;span&gt;    volumes:
&lt;&#x2F;span&gt;&lt;span&gt;      - timetest:&#x2F;var&#x2F;lib&#x2F;postgres&#x2F;data
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  adminer:
&lt;&#x2F;span&gt;&lt;span&gt;    image: adminer:latest
&lt;&#x2F;span&gt;&lt;span&gt;    restart: always
&lt;&#x2F;span&gt;&lt;span&gt;    ports:
&lt;&#x2F;span&gt;&lt;span&gt;      - 8080:8080
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;volumes:
&lt;&#x2F;span&gt;&lt;span&gt;  timetest:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not a tutorial on Docker so the gist is that with this &lt;code&gt;docker-compose&lt;&#x2F;code&gt; file, I can spin up a &lt;code&gt;postgres&lt;&#x2F;code&gt; database by simply running the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Using -d flag for detach mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker compose up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The database would have a user &lt;code&gt;nahua&lt;&#x2F;code&gt; with a password &lt;code&gt;password&lt;&#x2F;code&gt; as well as a DB named &lt;code&gt;timetest&lt;&#x2F;code&gt; that’s listening on the port 5432. To examine the database easily, I could login onto &lt;code&gt;adminer&lt;&#x2F;code&gt; on &lt;a href=&quot;http:&#x2F;&#x2F;localhost:8080&quot;&gt;&lt;code&gt;localhost:8080&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-create-a-test-db-table&quot;&gt;3. Create a test DB table&lt;&#x2F;h3&gt;
&lt;p&gt;With the DB spinning, I procrastinated again because I dreaded writing raw SQL commands, not knowing exactly which types I should write.&lt;&#x2F;p&gt;
&lt;p&gt;About a day later, I overcame my inertia and logged in to the database to create the following test table that was filled with some relevant date &amp;amp; time types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Access the running database as the user &amp;quot;nahua&amp;quot; for the DB &amp;quot;timetest&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Then run SQL command to create a table called &amp;quot;time_tests&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; postgres &#x2F;usr&#x2F;bin&#x2F;psql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; nahua&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; timetest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;psql&lt;&#x2F;span&gt;&lt;span&gt; (14.2 (Debian 14.2-1.pgdg110+1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; for help.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timetest&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CREATE&lt;&#x2F;span&gt;&lt;span&gt; TABLE time_tests (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt; SERIAL NOT NULL PRIMARY KEY,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created_at&lt;&#x2F;span&gt;&lt;span&gt; TIMESTAMPTZ NOT NULL DEFAULT NOW()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created_date&lt;&#x2F;span&gt;&lt;span&gt; DATE NOT NULL DEFAULT NOW()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created_time&lt;&#x2F;span&gt;&lt;span&gt; TIME NOT NULL DEFAULT NOW()
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timetest&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\q
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-reproduce-the-issue-for-sanity-check&quot;&gt;4. Reproduce the issue for sanity check&lt;&#x2F;h3&gt;
&lt;p&gt;I ran the following commands per specification of the documentation and confirmed that I had everything set up properly for testing my code later on:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-cli generate entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; postgres:&#x2F;&#x2F;nahua:password@localhost:5432&#x2F;timetest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In essence, &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; would connect to the DB table I spun up and fetch the schema of the &lt;code&gt;time_tests&lt;&#x2F;code&gt; table and translate it into Rust code, i.e. &lt;code&gt;entities&lt;&#x2F;code&gt; files in my barebone project’s &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;This would generate the following files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; mod.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; prelude.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; seaql_migrations.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; time_tests.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;time_tests.rs&lt;&#x2F;code&gt; is the file of interest here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat time_tests.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;!&lt;&#x2F;span&gt;&lt;span&gt; SeaORM Entity. Generated by sea-orm-codegen 0.8.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; sea_orm::entity::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[sea_orm(table_name = &amp;quot;time_tests&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; struct Model {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[sea_orm(primary_key)]
&lt;&#x2F;span&gt;&lt;span&gt;    pub id: i32,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_at: DateTimeWithTimeZone,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_date: Date,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_time: Time,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[derive(Copy, Clone, Debug, EnumIter)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; enum Relation {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt; RelationTrait for Relation {
&lt;&#x2F;span&gt;&lt;span&gt;    fn def(&amp;amp;self) -&amp;gt; RelationDef {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No RelationDef&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt; ActiveModelBehavior for ActiveModel {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I’m done with my feature, I’d be able to specify a &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt; flag with a value so that the values in the &lt;code&gt;time_tests&lt;&#x2F;code&gt; model would be the following for &lt;code&gt;chrono&lt;&#x2F;code&gt; crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_at: DateTimeWithTimeZone,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_date: Date,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_time: Time,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the following for &lt;code&gt;time&lt;&#x2F;code&gt; crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_at: TimeDateTimeWithTimeZone,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_date: TimeDate,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; created_time: TimeTime,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This information was gathered from the documentation for &lt;a href=&quot;https:&#x2F;&#x2F;www.sea-ql.org&#x2F;SeaORM&#x2F;docs&#x2F;generate-entity&#x2F;entity-structure#column-type&quot;&gt;column types&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;work-towards-a-feature&quot;&gt;Work towards a feature&lt;&#x2F;h2&gt;
&lt;p&gt;Now I started investigating the code snippet Billy gave me more carefully. A few things I kept in mind were:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;How the &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; code works and how I could insert a new flag &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;Once the user could specify &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt; value, how do I pass this information down to the part of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;86e7e808b37179315a1cc5c6c852764830c04661&#x2F;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs#L47-L51&quot;&gt;the code that Billy shared&lt;&#x2F;a&gt;, i.e. into the &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; method that was in charge of converting &lt;code&gt;chrono&lt;&#x2F;code&gt; types or &lt;code&gt;time&lt;&#x2F;code&gt; types and translate it into Rust types for the output files we had above?&lt;&#x2F;li&gt;
&lt;li&gt;Which other functions or objects are using &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; because I must adjust these functions as part of the clean-up after implementing the new feature?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;1-the-structure-of-seaorm-project&quot;&gt;1. The Structure of SeaORM project&lt;&#x2F;h3&gt;
&lt;p&gt;As the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;master&#x2F;Cargo.toml&quot;&gt;&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; suggests, &lt;code&gt;sea-orm&lt;&#x2F;code&gt; has the following workspaces:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;members &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sea-orm-macros&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sea-orm-codegen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Examining the structure, we can see that &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; is sort of a stand-alone project living inside &lt;code&gt;sea-orm&lt;&#x2F;code&gt; and &lt;code&gt;sea-orm-codegen&lt;&#x2F;code&gt; is the workspace that contains the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;86e7e808b37179315a1cc5c6c852764830c04661&#x2F;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs#L47-L51&quot;&gt;&lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; method that Billy originated pointed me to.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pwd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;path&#x2F;to&#x2F;our&#x2F;seaql&#x2F;sea-orm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -L&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-cli
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-codegen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; tests
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that my feature would almost exclusively reside in &lt;code&gt;sea-orm-cli&#x2F;&lt;&#x2F;code&gt; and &lt;code&gt;sea-orm-codegen&#x2F;&lt;&#x2F;code&gt; directories.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-adding-a-new-cli-flag&quot;&gt;2. Adding a new CLI flag&lt;&#x2F;h3&gt;
&lt;p&gt;By examining the file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;6f4f3a76effc4633cfe5aeb91d164bae819da9b6&#x2F;sea-orm-cli&#x2F;src&#x2F;cli.rs&quot;&gt;&lt;code&gt;sea-orm&#x2F;sea-orm-cli&#x2F;src&#x2F;cli.rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, I quickly familiarized myself with how the project uses &lt;code&gt;clap&lt;&#x2F;code&gt; to generate CLI commands and flags and wrote a new flag for &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt; (click for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&#x2F;files#diff-a07d755f2f721c1b06b1c33b45a507b6c55cc99746e69b036ac7b08788aaac98&quot;&gt;a Github view&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-cli&#x2F;src&#x2F;cli.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_cli&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; App&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        Arg::with_name(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DATE_TIME_CRATE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;date-time-crate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The datetime crate to use for generating entities.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;takes_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;possible_values&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;default_value&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-refactor-add-a-context-struct-and-date-time-crate-enum&quot;&gt;3. Refactor; add a context struct and date time crate enum&lt;&#x2F;h3&gt;
&lt;p&gt;I also traced the usage of &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; all the way back to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;9d2cae44b3612b6fdc3dee7d030ae43916150e6d&#x2F;sea-orm-cli&#x2F;src&#x2F;commands.rs#L155-L156&quot;&gt;&lt;code&gt;sea-orm&#x2F;sea-orm-cli&#x2F;src&#x2F;commands.rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; where the following lines would generate the entities:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-cli&#x2F;src&#x2F;commands.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_generate_command&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ArgMatches&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = EntityTransformer::transform(table_stmts)?
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(expanded_format, WithSerde::from_str(with_serde).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So I somehow needed to pass the user’s &lt;code&gt;date-time-crate&lt;&#x2F;code&gt; choice into &lt;code&gt;EntityWriter.generate&lt;&#x2F;code&gt; method so that &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; would eventually pick up this data and act accordingly. Essentially, I needed some sort of a context struct for this job.&lt;&#x2F;p&gt;
&lt;p&gt;I talked with Billy about this and he pointed me to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;680#discussion_r860780963&quot;&gt;his comment&lt;&#x2F;a&gt; on another standing PR:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;negezor&quot;&gt;@negezor&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;, thanks for the updates! I think the semantic isn&#x27;t seems right. The transformer, &lt;code&gt;EntityTransformer::transform(table_stmts, name_resolver)&lt;&#x2F;code&gt;, don&#x27;t need name resolver. Instead, we could have introduce a new struct called &lt;code&gt;EntityWriterContext&lt;&#x2F;code&gt; which contains three things...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;EntityWriterContext {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expanded_format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_serde&lt;&#x2F;span&gt;&lt;span&gt;: WithSerde,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name_resolver&lt;&#x2F;span&gt;&lt;span&gt;: NameResolver,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Then, &lt;code&gt;EntityWriter::generate&lt;&#x2F;code&gt; method would take an &lt;code&gt;EntityWriterContext&lt;&#x2F;code&gt;. Thoughts?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This was very helpful! So I wrote the following struct with a &lt;code&gt;new&lt;&#x2F;code&gt; method that specified the variables needed by &lt;code&gt;EntityWriter.generate&lt;&#x2F;code&gt; to generate the entities:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;writer.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;EntityWriterContext {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expanded_format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_serde&lt;&#x2F;span&gt;&lt;span&gt;: WithSerde,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date_time_crate&lt;&#x2F;span&gt;&lt;span&gt;: DateTimeCrate,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;EntityWriterContext {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expanded_format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with_serde&lt;&#x2F;span&gt;&lt;span&gt;: WithSerde,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date_time_crate&lt;&#x2F;span&gt;&lt;span&gt;: DateTimeCrate,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            expanded_format,
&lt;&#x2F;span&gt;&lt;span&gt;            with_serde,
&lt;&#x2F;span&gt;&lt;span&gt;            date_time_crate,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Meanwhile, let’s also work out a &lt;code&gt;DateTimeCrate&lt;&#x2F;code&gt; enum so that we could store information about which crate the user chooses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;writer.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;DateTimeCrate {
&lt;&#x2F;span&gt;&lt;span&gt;    Chrono,
&lt;&#x2F;span&gt;&lt;span&gt;    Time,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;FromStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;DateTimeCrate {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::Error;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; s {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Chrono,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Time,
&lt;&#x2F;span&gt;&lt;span&gt;            v =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::Error::TransformError(format!(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unsupported enum variant &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    v
&lt;&#x2F;span&gt;&lt;span&gt;                )))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These changes are all &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&#x2F;files#diff-d81f32c93a7a9410aefd84070a18ef2ebfd49391151444fad1a752158b6384c7&quot;&gt;available here&lt;&#x2F;a&gt; on Github.&lt;&#x2F;p&gt;
&lt;p&gt;With the &lt;code&gt;EntityWriterContext&lt;&#x2F;code&gt; struct and the &lt;code&gt;DateTimeCrate&lt;&#x2F;code&gt; enum ready, I could basically write the following in &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; to let the command pass the &lt;code&gt;--date-time-crate&lt;&#x2F;code&gt; information to the code that generates the entities files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-cli&#x2F;src&#x2F;commands.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_generate_command&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ArgMatches&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;value_of&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DATE_TIME_CRATE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; writer_context = EntityWriterContext::new(
&lt;&#x2F;span&gt;&lt;span&gt;        expanded_format,
&lt;&#x2F;span&gt;&lt;span&gt;        WithSerde::from_str(with_serde).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        DateTimeCrate::from_str(date_time_crate).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = EntityTransformer::transform(table_stmts)?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;writer_context);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-sew-the-thread&quot;&gt;4. Sew the thread&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we’ve introduced an &lt;code&gt;EntityWriterContext&lt;&#x2F;code&gt;, we must update all the methods that would be affected by it until we’ve reached &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; method. This part was quite mechanical and rather easy and the changes can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&#x2F;files#diff-cf7963a581865b246e6f94d87d21770aeb273df05aa79d1c060decd82b15c3fc&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&#x2F;files#diff-d81f32c93a7a9410aefd84070a18ef2ebfd49391151444fad1a752158b6384c7&quot;&gt;here&lt;&#x2F;a&gt;, mostly in the &lt;code&gt;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;base_entity.rs&lt;&#x2F;code&gt; file and &lt;code&gt;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;writer.rs&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-translate-different-crate-types-into-correct-column-types&quot;&gt;5. Translate different crate types into correct column types&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, we have arrived at the beginning of this story when Billy showed me the original code that should be impacted by this feature change:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_rs_type&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(unreachable_patterns)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident: TokenStream = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.col_type {
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Char(_)
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Float(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Double(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Json | ColumnType::JsonBinary =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Date =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Time(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::DateTime(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Timestamp(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeUtc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::TimestampWithTimeZone(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeWithTimeZone&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I decided to just do some nested match expressions to translate the types properly given the variable &lt;code&gt;date_time_crate&lt;&#x2F;code&gt; that we’ve passed down from the command line via the &lt;code&gt;EntityWriterContext&lt;&#x2F;code&gt; struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_rs_type&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date_time_crate&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;DateTimeCrate) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(unreachable_patterns)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident: TokenStream = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.col_type {
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Char(_)
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Float(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Double(_) =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Json | ColumnType::JsonBinary =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Date =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate {
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Chrono =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Time =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TimeDate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Time(_) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate {
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Chrono =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Time =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TimeTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::DateTime(_) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate {
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Chrono =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Time =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TimeDateTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::Timestamp(_) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate {
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Chrono =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeUtc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ColumnType::Timpestamp(_) =&amp;gt; time::PrimitiveDateTime: https:&#x2F;&#x2F;docs.rs&#x2F;sqlx&#x2F;0.3.5&#x2F;sqlx&#x2F;postgres&#x2F;types&#x2F;index.html#time
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Time =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TimeDateTime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        ColumnType::TimestampWithTimeZone(_) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; date_time_crate {
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Chrono =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DateTimeWithTimeZone&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            DateTimeCrate::Time =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TimeDateTimeWithTimeZone&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Changes can be viewed on Github &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&#x2F;files#diff-63bc9c1369063e383c3fd1ab5fa18f670946c43dccf172c8919c01028b340993&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-test-the-code-and-try-it-out&quot;&gt;6. Test the code and try it out&lt;&#x2F;h3&gt;
&lt;p&gt;Before finishing up, I wrote &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;blob&#x2F;6f4f3a76effc4633cfe5aeb91d164bae819da9b6&#x2F;sea-orm-codegen&#x2F;src&#x2F;entity&#x2F;column.rs#L344-L384&quot;&gt;some unit tests&lt;&#x2F;a&gt; for distinguishing &lt;code&gt;time&lt;&#x2F;code&gt; from &lt;code&gt;chrono&lt;&#x2F;code&gt; types in the &lt;code&gt;Column.get_rs_type&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;p&gt;Now, since everything is ready, we should test the end product. Let’s install &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; from our updated local source code by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pwd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;path&#x2F;to&#x2F;our&#x2F;seaql&#x2F;sea-orm&#x2F;sea-orm-cli
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This installs `sea-orm-cli` from our local source code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --path&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, I ran the &lt;code&gt;sea-orm-cli&lt;&#x2F;code&gt; command in my barebone project to see if I could generate the correct entity files with the correct types given &lt;code&gt;chrono&lt;&#x2F;code&gt; or &lt;code&gt;time&lt;&#x2F;code&gt; crate specification:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sea-orm-cli generate entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --date-time-crate&lt;&#x2F;span&gt;&lt;span&gt; time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; postgres:&#x2F;&#x2F;nahua:password@localhost:5432&#x2F;timetest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat time_tests.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;!&lt;&#x2F;span&gt;&lt;span&gt; SeaORM Entity. Generated by sea-orm-codegen 0.8.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; sea_orm::entity::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[sea_orm(table_name = &amp;quot;time_tests&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; struct Model {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[sea_orm(primary_key)]
&lt;&#x2F;span&gt;&lt;span&gt;    pub id: i32,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_at: TimeDateTimeWithTimeZone,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_date: TimeDate,
&lt;&#x2F;span&gt;&lt;span&gt;    pub created_time: TimeTime,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#[derive(Copy, Clone, Debug, EnumIter)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; enum Relation {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt; RelationTrait for Relation {
&lt;&#x2F;span&gt;&lt;span&gt;    fn def(&amp;amp;self) -&amp;gt; RelationDef {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No RelationDef&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt; ActiveModelBehavior for ActiveModel {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome. So I wrote up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&#x2F;sea-orm&#x2F;pull&#x2F;724&quot;&gt;a PR&lt;&#x2F;a&gt; for this issue. Let’s wait and see what the code reviewers say 😉&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;&#x2F;h2&gt;
&lt;p&gt;Congratulations! You’ve gone through my long and winding blah blah. I hope you’ve learned something from my walk-through and, perhaps, you’ve realized that open source contribution does not need to be that intimidating!&lt;&#x2F;p&gt;
&lt;p&gt;I want to give the good people at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeaQL&quot;&gt;SeaQL&lt;&#x2F;a&gt; a quick shout-out and tell the world that they’re awesome for doing open source works! If you can, please sponsor them so that they can continue doing open source works and mentor new contributors.&lt;&#x2F;p&gt;
&lt;p&gt;In the near future, I hope to write a few more walk-throughs for different projects so as to provide you with a wide range of examples on open source contribution.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, you are well-equipped both mentally and skill-wise to contribute to open source. Take your time, don’t get anxious, and enjoy the process!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>[Personal] Remake Our Self: My Path to Programming</title>
		<published>2020-08-30T00:00:00+00:00</published>
		<updated>2020-08-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://nahua.dev/blog/my-path-to-programming/" type="text/html"/>
		<id>https://nahua.dev/blog/my-path-to-programming/</id>
		<content type="html">&lt;p&gt;This is a long, detailed, and brutally honest post about how I became a software engineer.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In this post, I recount the failures that challenged me and the right choices I made that I am grateful for. It is written in self-reflection as well as self-meditation for a small circle of friends and acquaintances. Should you, a dear stranger, find any inspiration or consolation in my writing, I would feel a great sense of joy and achievement.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am writing this not for the eyes of the many, but for yours alone: for each of us is audience enough for the other.&lt;&#x2F;p&gt;
&lt;p&gt;-- Epicurus&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;&#x2F;h2&gt;
&lt;p&gt;It is challenging to start a career in software engineering without a background in a related university degree. It is certainly a rewarding path but, like my story suggests, we must have the conviction to work extremely hard, learn every day, set the right expectations, and continue re-making ourselves so that we could capture an opportunity when luck befalls on us. No matter what kind of career pivots we want to make, the key to success is to find the sweet spot between our passion and market demands through continuous learning and a lot of trials and errors.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Thanks to Silicon Valley, software engineering is one of the most (excessively) glorified lines of work in the 21st century. More and more people every day are curious about entering software from other fields.&lt;&#x2F;p&gt;
&lt;p&gt;I started programming in April, 2016. I began my software internship in April 2020. In July, 2020, I officially became a junior software engineer and joined the ranks of life-long learners who play and toil in one of the most dynamic, ever-changing fields.&lt;&#x2F;p&gt;
&lt;p&gt;This blog post is written mostly for myself. With feedback from my closest friends, I hope it represents a sincere, candid account of all the failures I faced, the right actions I took, as well as the personality I display in my pursuit to find career fulfillment.&lt;&#x2F;p&gt;
&lt;p&gt;If there were any external motivations for this post, then it would be to share my conviction that, regardless of what career you are interested in, learning how to &lt;strong&gt;remake our &lt;em&gt;self&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; by acquiring knowledge in unfamiliar territory and picking up new skills on the fly is one of the most essential skills we should learn today.&lt;&#x2F;p&gt;
&lt;p&gt;In another word, embrace knowledge that you are curious about, whether you studied it for your degree or not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-the-origin&quot;&gt;Back to the Origin&lt;&#x2F;h2&gt;
&lt;p&gt;My story began in the fall of 2006 when I entered one of the most prestigious high schools in Fujian, China with flying marks. In my city&#x27;s annual high school entrance exam, I ranked as the top student in my middle school and among the top 30 best students. My blood was pumped with confidence and I felt I was a smart cookie destined for greatness.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;my_path_to_programming&#x2F;hackers_and_painters.jpg&quot; alt=&quot;Hackers &amp; Painters&quot;&#x2F;&gt;
&lt;p&gt;Around this time, I developed an admiration for &lt;strong&gt;hackers&lt;&#x2F;strong&gt; after reading the Chinese translation of Eric S. Raymond&#x27;s blog post, &lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;hacker-howto.html&quot;&gt;How to Become a Hacker&lt;&#x2F;a&gt; and a few poorly translated chapters of Paul Graham&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;hp.html&quot;&gt;Hackers and Painters&lt;&#x2F;a&gt;. A hacker&#x27;s personality and character, as revealed by Raymond and Graham&#x27;s writings, as well as the meritocratic nature of hacker communities deeply resonated with the yet-to-be-developed values I had. (&lt;em&gt;Note: Steven Levy&#x27;s Hackers: Heroes of the Computer Revolution is a great book that I only encountered over a decade later.&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;With encouragement from my high school best friend who knew programming already, I signed up for a weekend Pascal crash course offered by my high school. As I entered a room full of blue DOS screens on a fateful, humid Saturday morning, I was frightened.&lt;&#x2F;p&gt;
&lt;p&gt;Having grown up in a family that did not allow much time to play on a computer, I could not even type properly with five fingers at that time, not to mention using a DOS and writing &lt;code&gt;if-else&lt;&#x2F;code&gt; statements or &lt;code&gt;for-loops&lt;&#x2F;code&gt; in a dreadful language called &lt;strong&gt;Turbo Pascal&lt;&#x2F;strong&gt;! What&#x27;s worse was that &lt;em&gt;everyone except me&lt;&#x2F;em&gt; seemed to be able to follow the pace of the crash course!&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;my_path_to_programming&#x2F;turbo_pascal.png&quot; alt=&quot;Turbo Pascal DOS Interface&quot;&#x2F;&gt;
&lt;p&gt;For some reason, staring at that blue screen, I could not understand how a computer &lt;em&gt;thinks&lt;&#x2F;em&gt;. Nor could I write down any line of code to perform more than a standard:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pascal&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pascal &quot;&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt; Hello;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;  writeln (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I felt nervous, my head sweating. The teacher asked us to solve some more basic problems, but my brain felt like a overcooked pot of porridge. I sat there, stupified and petrified, while all the other students coded away, sharing their excitement with each other.&lt;&#x2F;p&gt;
&lt;p&gt;By lunch break, I sneaked out of the classroom and went home. I felt awfully stupid among some of the best students in my city.&lt;&#x2F;p&gt;
&lt;p&gt;In the subsequent weeks, I tried &lt;code&gt;Java&lt;&#x2F;code&gt;, &lt;code&gt;C&lt;&#x2F;code&gt;, and &lt;code&gt;C++&lt;&#x2F;code&gt;, languages my cousin was learning for his CS program at a university. Yet each time I did not know even how to install the software for these languages on my father&#x27;s Windows PC. I tried writing code on paper, but even the simplest &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;&#x2F;code&gt; seemed way too complicated for me, not to mention the verbose &lt;code&gt;Java&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And then, sometime sooner or later, I gave up and concluded that I was not made for programming. From that moment on, programming became a painful reminder of that awkward, humiliating morning and my fragile ego could not allow the acknowledgement that I was not as smart as I thought.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-i-started-learning-python&quot;&gt;How I Started Learning Python&lt;&#x2F;h2&gt;
&lt;p&gt;Fast forward to a decade later in 2016, I had already completed a BA in history from Texas A&amp;amp;M, with the prestigious &lt;em&gt;magna cum laude&lt;&#x2F;em&gt; and the key to &lt;em&gt;Phi Beta Kappa&lt;&#x2F;em&gt; honor society under my belt. Having no idea what to do with my life and with an aversion of preparing for the Law School Admission Test (LSAT), I was pursuing bachelor&#x27;s studies in a prestigious business school in St. Gallen, Switzerland.&lt;&#x2F;p&gt;
&lt;p&gt;There, in that beautiful little Swiss town, I entered the most trying two years of my life. While my classmates were scoring interviews with the likes of UBS, Goldman Sachs, and McKinsey, I could not get a business internship either in Switzerland or Germany. In fact, from the numerous applications I sent out, I got only one interview and the company took the other candidate.&lt;&#x2F;p&gt;
&lt;p&gt;Nowhere. Stuck. I knew I missed something, but I could not tell what it was. Having been a star at Texas A&amp;amp;M, I felt like a complete loser in Switzerland.&lt;&#x2F;p&gt;
&lt;p&gt;Out of sheer luck, I got in touch with a Frankfurt-based value investor, an alumnus who was kind enough to offer me some time to &lt;em&gt;chat&lt;&#x2F;em&gt;. We had a pleasant conversation over coffee in St. Gallen&#x27;s Altstadt, during which, however, he quickly determined that I lacked all the necessary financial and accounting knowledge to work as an intern for his fund.&lt;&#x2F;p&gt;
&lt;p&gt;Sensing his acute yet accurate judgement, I asked out of desperation: &amp;quot;&lt;em&gt;What kind of skills should I learn that would be valuable to your fund?&lt;&#x2F;em&gt;&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;He replied: &amp;quot;&lt;em&gt;You could consider learning&lt;&#x2F;em&gt; &lt;strong&gt;Python&lt;&#x2F;strong&gt; &lt;em&gt;and&lt;&#x2F;em&gt; &lt;strong&gt;programming&lt;&#x2F;strong&gt; &lt;em&gt;for machine learning. Technology is coming into value investing as well now.&lt;&#x2F;em&gt;&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I felt a knot in my stomach tying up instantly. Words could not describe my frustration and disappointment as I walked home. I called my girlfriend at the time with tears in my eyes, whining to her that the last thing in the world I would want to do is learning how to program again and this investor literally just told me I should learn &lt;em&gt;Python&lt;&#x2F;em&gt; for programming. Beaten and defeated, I went to bed early that day but could not fall asleep.&lt;&#x2F;p&gt;
&lt;p&gt;The next morning, still with cloud in my mind, I bit my teeth and searched for online courses that would teach me &lt;code&gt;Python&lt;&#x2F;code&gt;. I found a few free resources, managed to install &lt;code&gt;Python&lt;&#x2F;code&gt; on my Windows laptop, and started programming.&lt;&#x2F;p&gt;
&lt;p&gt;Immediately, I realized that something was different: I did not feel dumbfounded like I felt with &lt;code&gt;Pascal&lt;&#x2F;code&gt;, &lt;code&gt;C&lt;&#x2F;code&gt; or &lt;code&gt;C++&lt;&#x2F;code&gt;. There was no mysterious, magical, scret code flying around the text editor. It was simple. My hello world program (in &lt;code&gt;Python2&lt;&#x2F;code&gt; syntax) was 1 line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With still a lot of uncertainty and fear in me, I told myself that this time, I might actually get somewhere with &lt;code&gt;Python&lt;&#x2F;code&gt;. And that was the true story to how I started programming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-more-and-encountering-deep-learning&quot;&gt;Coding More and Encountering Deep Learning&lt;&#x2F;h2&gt;
&lt;p&gt;I would like to sincerely thank Guido van Rossum and all the core &lt;code&gt;Python&lt;&#x2F;code&gt; developers because they created a beautiful language that is inviting to those of us who are frightened by &lt;code&gt;C++&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After learning basic Python syntax and some programming concepts with the online book &lt;a href=&quot;https:&#x2F;&#x2F;learnpythonthehardway.org&#x2F;python3&#x2F;&quot;&gt;Learn Python the Hard Way&lt;&#x2F;a&gt; and Coursera&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;specializations&#x2F;python&quot;&gt;Python for Everybody&lt;&#x2F;a&gt;, I gained some confidence in programming. I switched my operating system from Windows to &lt;a href=&quot;https:&#x2F;&#x2F;ubuntu.com&#x2F;&quot;&gt;Ubuntu&lt;&#x2F;a&gt;, a popular distro of Linux, as a gesture of committing to coding as a lifestyle.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t fall in love with programming yet. Sometimes, when I encountered a new concept that I could not understand, my fear of computer from 2006 would arise again and I had to give myself time to calm down and get back at the computer screen.&lt;&#x2F;p&gt;
&lt;p&gt;But for a student who felt stuck in his self-pity and stagnated career path, programming was weirdly liberating. And so, even making a useless, buggy text-based game in the terminal was a lovely distraction for me from the boring Economics exams that I had to memorize for.&lt;&#x2F;p&gt;
&lt;p&gt;Without any deliberate purpose, I learned more and more, such as how to dual boot Ubuntu and Windows, how to use the terminal and commandline, and how to write a small script to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nahuakang&#x2F;python-mini-projects&#x2F;blob&#x2F;master&#x2F;youtube-downloader.py&quot;&gt;scrap search results from YouTube and download YouTube videos&lt;&#x2F;a&gt;. The more I wrote, the more fun programming became. I knew no one would use any of the programs I wrote, but I was proud of them anyways.&lt;&#x2F;p&gt;
&lt;p&gt;By the fall of 2016, I made a calculated move of not completing my studies in St. Gallen but instead began my master&#x27;s studies in Stockholm School of Economics. On the one hand, I wanted to close a long-distance relationship, on the other, I hoped that Scandinavia might offer opportunities to my stagnated career development.&lt;&#x2F;p&gt;
&lt;p&gt;Being the only student in my program who could &lt;em&gt;script&lt;&#x2F;em&gt; in a general-purpose programming language, I went deeper and deeper into it. While my classmates were studying consulting cases, I hacked in my text editor and terminal to render a Hangman Game while learning how to modularize my code. While my classmates were partying and socializing in the evenings, I sat in a basement and continued learning with online math and programming courses. It brought me pride to be the only person who knew something about the magic in a computer among a bunch of business students.&lt;&#x2F;p&gt;
&lt;p&gt;Around this time, I completed &lt;a href=&quot;https:&#x2F;&#x2F;courses.edx.org&#x2F;courses&#x2F;course-v1:MITx+6.00.1x+2T2017_2&#x2F;course&#x2F;&quot;&gt;MIT&#x27;s 6.00.1x and 6.00.2x&lt;&#x2F;a&gt; and started doing &lt;a href=&quot;https:&#x2F;&#x2F;cs50.harvard.edu&#x2F;web&#x2F;2020&#x2F;&quot;&gt;Harvard&#x27;s CS50 course&lt;&#x2F;a&gt;, of which I eventually completed 70% of the homework. I love CS50 and its people. To this day, it is still the single best online course of any kind and I recommended it to all my close friends who wished to learn programming.&lt;&#x2F;p&gt;
&lt;p&gt;Soon after, I also discovered Udacity&#x27;s new program on &lt;strong&gt;Deep Learning&lt;&#x2F;strong&gt;. Having no clue what deep learning is, I signed up for the course because it sounded cool (nowadays you can learn with free resources like &lt;a href=&quot;https:&#x2F;&#x2F;www.fast.ai&#x2F;&quot;&gt;fast.ai&lt;&#x2F;a&gt;). I learned about back propagation, convolutional neural networks, image classification, Long Short-Term Memory (LSTM), and Generative Adversarial Networks (GAN). None of that was easy and I definitely did not manage to do everything on my own. And wow! I could train a &amp;quot;neural network&amp;quot; to recognize digits in images!&lt;&#x2F;p&gt;
&lt;p&gt;Quite similar to my earliest experience with programming, I felt often dumbfounded with deep learning but I persisted because the subject was fascinating and because I thought I had no other competitive advantages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;failures-after-failures-until-luck-struck&quot;&gt;Failures After Failures, Until Luck Struck&lt;&#x2F;h2&gt;
&lt;p&gt;To digest my learnings better, I started to write blogs. I was honored that the two pieces I wrote on the basics of deep learning (&lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;introducing-deep-learning-and-neural-networks-deep-learning-for-rookies-1-bd68f9cf5883&quot;&gt;post #1&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;multi-layer-neural-networks-with-sigmoid-function-deep-learning-for-rookies-2-bf464f09eb7f&quot;&gt;post #2&lt;&#x2F;a&gt;) invited over &lt;strong&gt;240K views&lt;&#x2F;strong&gt; in total. (&lt;em&gt;Note: I never found the time nor energy to complete the third blog on backpropagation. Here&#x27;s an amazing &lt;a href=&quot;https:&#x2F;&#x2F;colah.github.io&#x2F;posts&#x2F;2015-08-Backprop&#x2F;&quot;&gt;post on backpropagation&lt;&#x2F;a&gt; from Christoph Olah&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;These little successes boosted my confidence and I decided to look for interesting AI startups to apply for a &lt;strong&gt;product, marketing, or bizdev&lt;&#x2F;strong&gt; internship in Berlin. I thought about applying for engineering positions after reading &lt;a href=&quot;https:&#x2F;&#x2F;www.roguelynn.com&#x2F;words&#x2F;my-path-into-engineering&#x2F;&quot;&gt;Lynn Root&#x27;s story of her transition into engineering&lt;&#x2F;a&gt;, but I chickened out. Anyways, I reached out to all the startups I could find at the time.&lt;&#x2F;p&gt;
&lt;p&gt;The cycle repeated itself. I was either rejected or ignored.&lt;&#x2F;p&gt;
&lt;p&gt;I remember one startup that I applied to wrote back saying that they did not have a position suitable for me, yet I found out a month later that they hired another person from St. Gallen for a role that I was interested in. That hurt my pride in that moment but, in hindsight, never take these decisions personally. Startups tend to lack a large HR team to digest all the applications and sometimes, not being hired by the wrong employer is a good thing.&lt;&#x2F;p&gt;
&lt;p&gt;In my moments of frustration, Lady Fortuna befell on me. I reached out to Moritz, a complete stranger who at the time was the product owner of a deep learning startup, &lt;a href=&quot;https:&#x2F;&#x2F;20bn.com&#x2F;&quot;&gt;TwentyBN&lt;&#x2F;a&gt;. By then, I had almost given up on finding an internship in Berlin and reached out only because Moritz&#x27;s profile resembled mine and I thought I could seek some advice to my career path. I clicked the button on his LinkedIn profile and sent a short message.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;my_path_to_programming&#x2F;linkedin_message.png&quot; alt=&quot;A simple LinkedIn message changed my life&quot;&#x2F;&gt;
&lt;p&gt;Little did I know that this message landed me an internship and a full-time job that eventually allowed and encouraged me to transit into software development. (&lt;em&gt;Note: In October 2017, before my internship with TwentyBN started, I briefly contributed to an open source project &lt;a href=&quot;https:&#x2F;&#x2F;www.openmined.org&#x2F;&quot;&gt;OpenMined&lt;&#x2F;a&gt; in an attempt to gain more experience in software. That experience also scared me because I did not understand Git, Github, unit testing, and CI&#x2F;CD. I paused it in the excuse of work until April, 2020 when I became a software intern at TwentyBN.&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dissatisfaction-with-career-path&quot;&gt;Dissatisfaction with Career Path&lt;&#x2F;h2&gt;
&lt;p&gt;I worked for 2 years as a product marketer and not for even a day did I feel it was my mission call. I took the job because I fully believed in TwentyBN&#x27;s people and our technology, but I &lt;em&gt;dislike&lt;&#x2F;em&gt; social media. I wanted to contribute to my company&#x27;s success but never managed to change my mind about social media marketing. I did not grow much in this position and never felt fulfilled.&lt;&#x2F;p&gt;
&lt;p&gt;During this period of time, I went through an amicable breakup that nevertheless broke my heart. Moreover, I secretly felt my position was being marginalized in the company. My salary rose but deep in my mind, I was frustrated that I could not play a more meaningful role. That depressing feeling I experienced in Switzerland seemed to be rising again.&lt;&#x2F;p&gt;
&lt;p&gt;While a part of me continued to indulge myself in some ocassional evening coding sessions and nerdy programming languages activities, I did not consider software a possibility for me. And I felt I was already too old to go back to a junior position and start over again.&lt;&#x2F;p&gt;
&lt;p&gt;At work, I started writing and editing our company newsletter &lt;a href=&quot;http:&#x2F;&#x2F;www.embodiedai.co&#x2F;&quot;&gt;Embodied AI&lt;&#x2F;a&gt;. In private, I started turning my reading list into book reviews and analysis on leadership in a newsletter called &lt;a href=&quot;https:&#x2F;&#x2F;plutarch.substack.com&#x2F;&quot;&gt;Plutarch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With a desire to build a reputation of my writing, I started experimenting and trying to attract people to sign up for both newsletters. I tried all kinds of marketing channels, got banned by multiple Reddit subreddits, and eventually managed around &lt;strong&gt;500&lt;&#x2F;strong&gt; subscribers for Embodied AI and &lt;strong&gt;100&lt;&#x2F;strong&gt; subscribers for my personal newsletter.&lt;&#x2F;p&gt;
&lt;p&gt;With myself, I took a friend Chris&#x27;s suggestion, overcame my gym-fear and started trying to weightlift and doing calisthenics, which was completely outside my comfort zone.&lt;&#x2F;p&gt;
&lt;p&gt;Fitness gave me dopamine and testosterone. But my newsletter attempts brought me no gratification. I continued and performed a variety of mini-experiments throughout a span of almost a year. Yet my career dissatisfaction continued.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;never-too-old-to-change-career&quot;&gt;Never Too Old to Change Career&lt;&#x2F;h2&gt;
&lt;p&gt;Towards the end of 2019, my long dissatisfaction with work manifested into an existential crisis (the coronavirus in 2020 intensified this crisis).&lt;&#x2F;p&gt;
&lt;p&gt;I came to one grim conclusion: &lt;strong&gt;If I were to continue doing product marketing for another 10 years, I would end up hating myself for not taking any action.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Again, this voice in my mind suggested software.&lt;&#x2F;p&gt;
&lt;p&gt;Already in 2018, I had wanted to ask TwentyBN for an internship as a deep learning engineering intern but I lacked the confidence to make the cut. And by the end of 2019, I heard enough success stories from acquaintances who landed software jobs after bootcamps that my desire to explore software engineering as a career re-kindled.&lt;&#x2F;p&gt;
&lt;p&gt;During my Christmas vacation back in China, I spent all the 3 weeks learning web development with &lt;a href=&quot;https:&#x2F;&#x2F;cs50.harvard.edu&#x2F;web&#x2F;2020&#x2F;&quot;&gt;Harvard&#x27;s CS50W&lt;&#x2F;a&gt;, coding from 8AM in the morning until 1 or 2AM in the night. I wanted to test myself with this intensive experience to see if I had it in me to be a programmer or if it were just a phase. The learning curve was steep and the great firewall prevented me from easy access to Google and StackOverflow. But I managed 2 buggy projects and learned some &lt;code&gt;Flask&lt;&#x2F;code&gt;, &lt;code&gt;Django&lt;&#x2F;code&gt;, &lt;code&gt;Javascript&lt;&#x2F;code&gt; and &lt;code&gt;WebSocket&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;my_path_to_programming&#x2F;programming_age.png&quot; alt=&quot;We are not too old to make the career switch into software&quot;&#x2F;&gt;
&lt;p&gt;What was most transformational during these 3 weeks was that, for the first time in almost 14 years, I felt again I was &lt;strong&gt;in the zone&lt;&#x2F;strong&gt;. I was absorbed in programming. Throughout the day I was contemplating on solving the projects and problems. I even had 2-3 dreams during which I was finding solutions to my code.&lt;&#x2F;p&gt;
&lt;p&gt;And programming suited me way more than product marketing. By nature, marketing is a highly difficult line of work. Viral marketing and growth marketing are well-studied topics, but no one could say with 100% confidence if any single strategy or action was responsible for a product or a company&#x27;s success.&lt;&#x2F;p&gt;
&lt;p&gt;Programming, however, is deadly logical. I was hooked into it because I enjoyed the instant gratification because, sometimes, even a single line of code change could result in a big visual difference. Bug-hunting, while sometimes tedious and frustrating, also gave me huge feelings of reward when I eventually debugged my code and consolidated my learning. This is way better than what I did in the past 2 years!&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I worked so hard during those weeks that I did not hear about the COVID19 until I returned from China to Berlin.&lt;&#x2F;p&gt;
&lt;p&gt;Back at work, I decided that I was not too old to give software engineering a try. I managed to convince my boss Moritz, my Python teamleads, as well as my CTO Ingo to give me a three-month internship with pay reduction. Again, there were sleepless nights and numerous moments of head-banging. The paycut was manageable, but my nervousness of not making the cut and my &lt;strong&gt;imposter syndrome&lt;&#x2F;strong&gt; added a lot of pressure on my mind.&lt;&#x2F;p&gt;
&lt;p&gt;By now, however, my programming experience has taught me &lt;strong&gt;what my learning patterns are&lt;&#x2F;strong&gt; and I have become more patient with myself. I learned steadily, solved tickets, asked for help, and eventually, the internship turned into a new, full-time position.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;remake-our-self&quot;&gt;Remake Our &amp;quot;Self&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;Having a family and good friends that unconditionally supported me helped. Having parents who value education and generously supported me in my worst moments helped. Having received a stranger&#x27;s advice helped. Having learned programming and deep learning helped. Having been a history major with good writing skills helped. And having been on the same wavelength with my company&#x27;s management and colleagues helped. All of that help was necessary.&lt;&#x2F;p&gt;
&lt;p&gt;But equally important, I also must thank Lady Fortuna for making me into &lt;strong&gt;a person who has the drive to learn new, seemingly daunting skills to re-make oneself with discipline and tenacity&lt;&#x2F;strong&gt;. Without this habit of continuous learning, I could not have achieved what I want.&lt;&#x2F;p&gt;
&lt;p&gt;As you might tell, my learning journey as a software Padawan has only just begun. Software engineering is a dynamic and energetic field with many talented people and brilliant ideas. I am still learning how to write good software and how to work across multiple teams.&lt;&#x2F;p&gt;
&lt;p&gt;In April, I have reconnected with the founder of the open source project &lt;a href=&quot;https:&#x2F;&#x2F;www.openmined.org&#x2F;&quot;&gt;OpenMined&lt;&#x2F;a&gt;. I began contributing in my limited capacity again so that to give myself more exposure to other programming languages to hone my overall skillset as a developer. It has not been easy but the OpenMined community is an amazing bunch.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, there are knowledge gaps that I have to make up for, such as architecture design, pattern design, as well as well-known algorithms and data structures. I am well aware of these gaps and will continue working on them. After all, I signed up for a career that only works if I continue to learn.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;la-fin&quot;&gt;La Fin&lt;&#x2F;h2&gt;
&lt;p&gt;Most of us will not have a straightforward career that soars like the rocket. Most of us are destined to encounter career deadlocks at one or another point in our lives. And most of us have the power to do something about it.&lt;&#x2F;p&gt;
&lt;p&gt;For me, that included almost a decade of switching majors and wondering what line of work I would be passionate about.&lt;&#x2F;p&gt;
&lt;p&gt;It involved facing setbacks and rejections every stop of my journey across United States and Europe. It involved failing a major in business administrations and flunked two exams for the first time in my life. It involved being unhappy about my career path for 2 years.&lt;&#x2F;p&gt;
&lt;p&gt;But like Dickens wrote, &lt;strong&gt;it was the worst of times, but it was also the best of times&lt;&#x2F;strong&gt;. Thanks to all the people who are or had been in my life, I survived. Failures challenged my understanding of my strengths and weaknesses, but none of them destroyed me.&lt;&#x2F;p&gt;
&lt;p&gt;Each time I was struck down, I cried a bit, rose up, and found consolation in learning new knowledge and acquiring new skills. There was no giving up.&lt;&#x2F;p&gt;
&lt;p&gt;Here I am today. A new journey just began and I am excited about all the exciting things I will learn along the journey. I am very confident that failures and rejections of all kinds will continue coming my way. I am sure I will have moments of weaknesses and feel defeated. But I have gone through plenty to know that I am strong enough to withstand all of them and continue remaking myself and my life.&lt;&#x2F;p&gt;
&lt;p&gt;I hid most of these failures from others in the past years. A part of me is still ashamed of them. But I decided to write them down as a form of self-reflection. Moreover, I know someone out there is going through similar experiences. Perhaps these words will help.&lt;&#x2F;p&gt;
&lt;p&gt;So here you go. This story is for you and I hope, despite its length, my history resonate with or inspire you so that you can eventually also remake your life. Good luck and never give up.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
