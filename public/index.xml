<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nahua Kang</title>
    <link>/</link>
    <description>Recent content on Nahua Kang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kangnahua [at] gmail dot com (Nahua Kang)</managingEditor>
    <webMaster>kangnahua [at] gmail dot com (Nahua Kang)</webMaster>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 08 Feb 2020 11:19:44 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust What Is Lifetime</title>
      <link>/posts/2020/09/rust-what-is-lifetime/</link>
      <pubDate>Sun, 13 Sep 2020 13:48:37 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/09/rust-what-is-lifetime/</guid>
      <description>@bobahop on Exercism:
You&amp;rsquo;re very welcome!
As for lifetimes&amp;hellip;a HashSet of str references is being returned. They can&amp;rsquo;t be references to str values created in anagrams_for, since those values would go out of scope and be destroyed at the end of the anagrams_for function. So they need to reference something being passed in. The HashSet is populated by references to the values in possible_anagrams, so we have to specify to the compiler that we are sure that the lifetime of the values referenced in the return HashSet is as long as for the values referenced in possible_anagrams.</description>
    </item>
    
    <item>
      <title>Rust for Loop and Iterators</title>
      <link>/posts/2020/09/rust-for-loop-and-iterators/</link>
      <pubDate>Sun, 13 Sep 2020 11:16:41 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/09/rust-for-loop-and-iterators/</guid>
      <description>Table of Content:  go to deref go to bottom  Introduction One of the most essential feature of any programming language is its for loop. As a programmer, we use for loops almost on a daily basis. However, a beginner in Rust might be confused by the variety of ways one could loop. Besides the infinite loop keyword and the common while-loop, Rust comes with 3 options for you to do a for-loop on : into_iter, iter and iter_mut.</description>
    </item>
    
    <item>
      <title>Remake Our Self: My Path into Engineering from the Humanities</title>
      <link>/posts/2020/08/my-path-into-engineering/</link>
      <pubDate>Sun, 30 Aug 2020 19:01:38 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/08/my-path-into-engineering/</guid>
      <description>This is a long, detailed, and brutally honest post in which I recount the failures that challenged me and the right choices I made that I am grateful for. It is written in self-reflection as well as self-meditation for a small circle of friends and acquaintances. Should you, a dear stranger, find any inspiration or consolation in my writing, I would feel a great sense of joy and achievement.
 I am writing this not for the eyes of the many, but for yours alone: for each of us is audience enough for the other.</description>
    </item>
    
    <item>
      <title>Go Template: Using Execute vs. ExecuteTemplate</title>
      <link>/posts/2020/08/golang-template-execute-vs-executetemplate/</link>
      <pubDate>Fri, 28 Aug 2020 21:59:26 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/08/golang-template-execute-vs-executetemplate/</guid>
      <description>Rendering the correct template is an important step in building a web application. If you are new to web programming in Go, chances are you might have come across two methods in the html/template package: func (*Template) Execute and func (*Template) ExecuteTemplate.
You might have also wondered: What are the differences between these two methods? The quick answer is to look up the official documentation:
 func (t *Template) Execute(wr io.</description>
    </item>
    
    <item>
      <title>Python: Immutables Are Not Always Immutable</title>
      <link>/posts/2020/03/python-immutable-and-mutable-objects/</link>
      <pubDate>Sun, 22 Mar 2020 11:05:25 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/03/python-immutable-and-mutable-objects/</guid>
      <description>If you know a bit of Python, you probably have heard of immutable and mutable objects (see data model). Objects can either be mutable or immutable, depending on which type they are.
Immutables and Mutables: Basics First, let&amp;rsquo;s review the basics of immutables and mutables that we all know.
Types of Mutable Objects Mutable ones can be changed after they are created. For Python, collections like list, dict, and set are mutable objects.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sat, 08 Feb 2020 11:19:44 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/projects/</guid>
      <description>Professional Work Currently I work professionally as a software engineer for Twenty Billion Neurons. My day-to-day role is using Python to implement the &amp;ldquo;logical functionality&amp;rdquo; of the brain of a deep-learning-powered virtual fitness trainer Ally. Download the app in App Store, it&amp;rsquo;s amazing!
Open Source Projects I am a firm believer in open source software. As of now, I devote my spare time to contribute to OpenMined, the privacy-preserving AI project that aims to unlock the power of deep learning and data while respecting the privacy for each individual.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sat, 08 Feb 2020 10:29:09 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/about/</guid>
      <description>This blog My personal hero, Richard Feynman, knew that knowing the name of something is different from knowing that thing. This blog is the documentation of my personal struggle in learning new programming languages and tools so that I, and perhaps you, will understand it and explain it to a 6-year-old with ease.
Skills I am proficient in Python and have good working knowledge of Javascript and Go.
In terms of libraries, I am familiar with PyTorch, Keras, Numpy, Flask, and some Go web programming packages.</description>
    </item>
    
  </channel>
</rss>