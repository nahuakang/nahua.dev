<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Nahua Kang</title>
    <link>/tags/untagged/</link>
    <description>Recent content in untagged on Nahua Kang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kangnahua [at] gmail dot com (Nahua Kang)</managingEditor>
    <webMaster>kangnahua [at] gmail dot com (Nahua Kang)</webMaster>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 13 Sep 2020 13:48:37 +0200</lastBuildDate>
    
	<atom:link href="/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust What Is Lifetime</title>
      <link>/posts/2020/09/rust-what-is-lifetime/</link>
      <pubDate>Sun, 13 Sep 2020 13:48:37 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/09/rust-what-is-lifetime/</guid>
      <description>@bobahop on Exercism:
You&amp;rsquo;re very welcome!
As for lifetimes&amp;hellip;a HashSet of str references is being returned. They can&amp;rsquo;t be references to str values created in anagrams_for, since those values would go out of scope and be destroyed at the end of the anagrams_for function. So they need to reference something being passed in. The HashSet is populated by references to the values in possible_anagrams, so we have to specify to the compiler that we are sure that the lifetime of the values referenced in the return HashSet is as long as for the values referenced in possible_anagrams.</description>
    </item>
    
    <item>
      <title>Rust for Loop and Iterators</title>
      <link>/posts/2020/09/rust-for-loop-and-iterators/</link>
      <pubDate>Sun, 13 Sep 2020 11:16:41 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/09/rust-for-loop-and-iterators/</guid>
      <description>Table of Content:  go to deref go to bottom  Introduction One of the most essential feature of any programming language is its for loop. As a programmer, we use for loops almost on a daily basis. However, a beginner in Rust might be confused by the variety of ways one could loop. Besides the infinite loop keyword and the common while-loop, Rust comes with 3 options for you to do a for-loop on : into_iter, iter and iter_mut.</description>
    </item>
    
  </channel>
</rss>